// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region Domain.IGame

namespace Domain
{
    [PayloadTable(typeof(IGame), PayloadTableKind.Request)]
    public static class IGame_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Enter_Invoke), typeof(Enter_Return) },
                { typeof(Leave_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class Enter_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.String userId;
            [ProtoMember(2)] public Domain.IGameObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IGame);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGame)__target).Enter(userId, observer);
                return (IValueGetable)(new Enter_Return { v = __v });
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class Enter_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Tuple<System.Int32, Domain.GameInfo> v;

            public Type GetInterfaceType()
            {
                return typeof(IGame);
            }

            public object Value
            {
                get { return v; }
            }
        }

        [ProtoContract, TypeAlias]
        public class Leave_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public Type GetInterfaceType()
            {
                return typeof(IGame);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGame)__target).Leave(userId);
                return null;
            }
        }
    }

    public interface IGame_NoReply
    {
        void Enter(System.String userId, Domain.IGameObserver observer);
        void Leave(System.String userId);
    }

    public class GameRef : InterfacedActorRef, IGame, IGame_NoReply
    {
        public GameRef() : base(null)
        {
        }

        public GameRef(IActorRef actor) : base(actor)
        {
        }

        public GameRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IGame_NoReply WithNoReply()
        {
            return this;
        }

        public GameRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GameRef(Actor, requestWaiter, Timeout);
        }

        public GameRef WithTimeout(TimeSpan? timeout)
        {
            return new GameRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<System.Int32, Domain.GameInfo>> Enter(System.String userId, Domain.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Enter_Invoke { userId = userId, observer = observer }
            };
            return SendRequestAndReceive<System.Tuple<System.Int32, Domain.GameInfo>>(requestMessage);
        }

        public Task Leave(System.String userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Leave_Invoke { userId = userId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGame_NoReply.Enter(System.String userId, Domain.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Enter_Invoke { userId = userId, observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IGame_NoReply.Leave(System.String userId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGame_PayloadTable.Leave_Invoke { userId = userId }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIGame
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIGame Convert(IGame value)
        {
            if (value == null) return null;
            return new SurrogateForIGame { Actor = ((GameRef)value).Actor };
        }

        [ProtoConverter]
        public static IGame Convert(SurrogateForIGame value)
        {
            if (value == null) return null;
            return new GameRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IGameClient

namespace Domain
{
    [PayloadTable(typeof(IGameClient), PayloadTableKind.Request)]
    public static class IGameClient_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(ZoneChange_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class ZoneChange_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadTagOverridable
        {
            [ProtoMember(1)] public System.String senderUserId;
            [ProtoMember(2)] public System.Byte[] bytes;

            public Type GetInterfaceType()
            {
                return typeof(IGameClient);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IGameClient)__target).ZoneChange(senderUserId, bytes);
                return null;
            }

            void IPayloadTagOverridable.SetTag(object value)
            {
                senderUserId = (System.String)value;
            }
        }
    }

    public interface IGameClient_NoReply
    {
        void ZoneChange(System.String senderUserId, System.Byte[] bytes);
    }

    public class GameClientRef : InterfacedActorRef, IGameClient, IGameClient_NoReply
    {
        public GameClientRef() : base(null)
        {
        }

        public GameClientRef(IActorRef actor) : base(actor)
        {
        }

        public GameClientRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IGameClient_NoReply WithNoReply()
        {
            return this;
        }

        public GameClientRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GameClientRef(Actor, requestWaiter, Timeout);
        }

        public GameClientRef WithTimeout(TimeSpan? timeout)
        {
            return new GameClientRef(Actor, RequestWaiter, timeout);
        }

        public Task ZoneChange(System.String senderUserId, System.Byte[] bytes)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameClient_PayloadTable.ZoneChange_Invoke { senderUserId = senderUserId, bytes = bytes }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IGameClient_NoReply.ZoneChange(System.String senderUserId, System.Byte[] bytes)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGameClient_PayloadTable.ZoneChange_Invoke { senderUserId = senderUserId, bytes = bytes }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIGameClient
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIGameClient Convert(IGameClient value)
        {
            if (value == null) return null;
            return new SurrogateForIGameClient { Actor = ((GameClientRef)value).Actor };
        }

        [ProtoConverter]
        public static IGameClient Convert(SurrogateForIGameClient value)
        {
            if (value == null) return null;
            return new GameClientRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IUser

namespace Domain
{
    [PayloadTable(typeof(IUser), PayloadTableKind.Request)]
    public static class IUser_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(EnterGame_Invoke), typeof(EnterGame_Return) },
                { typeof(GetId_Invoke), typeof(GetId_Return) },
                { typeof(LeaveGame_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class EnterGame_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.String name;
            [ProtoMember(2)] public Domain.IGameObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IUser)__target).EnterGame(name, observer);
                return (IValueGetable)(new EnterGame_Return { v = __v });
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class EnterGame_Return
            : IInterfacedPayload, IValueGetable, IPayloadActorRefUpdatable
        {
            [ProtoMember(1)] public System.Tuple<Domain.IGameClient, System.Int32, Domain.GameInfo> v;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public object Value
            {
                get { return v; }
            }

            void IPayloadActorRefUpdatable.Update(Action<object> updater)
            {
                if (v != null)
                {
                    if (v.Item1 != null) updater(v.Item1);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class GetId_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IUser)__target).GetId();
                return (IValueGetable)(new GetId_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetId_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.String v;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public object Value
            {
                get { return v; }
            }
        }

        [ProtoContract, TypeAlias]
        public class LeaveGame_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                await ((IUser)__target).LeaveGame();
                return null;
            }
        }
    }

    public interface IUser_NoReply
    {
        void EnterGame(System.String name, Domain.IGameObserver observer);
        void GetId();
        void LeaveGame();
    }

    public class UserRef : InterfacedActorRef, IUser, IUser_NoReply
    {
        public UserRef() : base(null)
        {
        }

        public UserRef(IActorRef actor) : base(actor)
        {
        }

        public UserRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IUser_NoReply WithNoReply()
        {
            return this;
        }

        public UserRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserRef(Actor, requestWaiter, Timeout);
        }

        public UserRef WithTimeout(TimeSpan? timeout)
        {
            return new UserRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<Domain.IGameClient, System.Int32, Domain.GameInfo>> EnterGame(System.String name, Domain.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.EnterGame_Invoke { name = name, observer = observer }
            };
            return SendRequestAndReceive<System.Tuple<Domain.IGameClient, System.Int32, Domain.GameInfo>>(requestMessage);
        }

        public Task<System.String> GetId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.GetId_Invoke {  }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task LeaveGame()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.LeaveGame_Invoke {  }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IUser_NoReply.EnterGame(System.String name, Domain.IGameObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.EnterGame_Invoke { name = name, observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.GetId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.GetId_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.LeaveGame()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.LeaveGame_Invoke {  }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIUser
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIUser Convert(IUser value)
        {
            if (value == null) return null;
            return new SurrogateForIUser { Actor = ((UserRef)value).Actor };
        }

        [ProtoConverter]
        public static IUser Convert(SurrogateForIUser value)
        {
            if (value == null) return null;
            return new UserRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IGameObserver

namespace Domain
{
    [PayloadTable(typeof(IGameObserver), PayloadTableKind.Notification)]
    public static class IGameObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(Enter_Invoke),
                typeof(Leave_Invoke),
                typeof(ZoneChange_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class Enter_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Enter(userId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Leave_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).Leave(userId);
            }
        }

        [ProtoContract, TypeAlias]
        public class ZoneChange_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.Byte[] bytes;

            public Type GetInterfaceType()
            {
                return typeof(IGameObserver);
            }

            public void Invoke(object __target)
            {
                ((IGameObserver)__target).ZoneChange(bytes);
            }
        }
    }

    public class GameObserver : InterfacedObserver, IGameObserver
    {
        public GameObserver()
            : base(null, 0)
        {
        }

        public GameObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public GameObserver(IActorRef target, int observerId = 0)
            : base(new ActorNotificationChannel(target), observerId)
        {
        }

        public void Enter(System.String userId)
        {
            var payload = new IGameObserver_PayloadTable.Enter_Invoke { userId = userId };
            Notify(payload);
        }

        public void Leave(System.String userId)
        {
            var payload = new IGameObserver_PayloadTable.Leave_Invoke { userId = userId };
            Notify(payload);
        }

        public void ZoneChange(System.Byte[] bytes)
        {
            var payload = new IGameObserver_PayloadTable.ZoneChange_Invoke { bytes = bytes };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIGameObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIGameObserver Convert(IGameObserver value)
        {
            if (value == null) return null;
            var o = (GameObserver)value;
            return new SurrogateForIGameObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IGameObserver Convert(SurrogateForIGameObserver value)
        {
            if (value == null) return null;
            return new GameObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
